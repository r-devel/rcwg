[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18863] New: Add source locations to parser warnings*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18863>\n\n            Bug ID: 18863\n           Summary: Add source locations to parser warnings\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: minor\n          Priority: P5\n         Component: Low-level\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>\n\nCreated attachment 3463\n  --&gt; <https:\/\/bugs.r-project.org\/attachment.cgi?id=3463&amp;action=edit>\nAdd source location info to the warning messages from the parser\n\nCurrently the parser generates warnings in exactly three cases, all incorrect\nuses of the `L` suffix for numeric literals\n\n 1. A true integer using a decimal e.g. `1.0L`\n 2. A true double using a decimal and `L` e.g. `1.1L`\n 3. A true double using no decimal and `L` e.g. `1e-3L`\n\nUnlike the helpful parser errors, however, no accompanying hint is given as to\nwhere in the source the issue might be found.\n\nThis patch adds some source info to the warning by imitating how it's produced\nin the error cases. I couldn't think of a reason not to support this, but my\nknowledge of the parser is still quite shallow.\n\nSome notes:\n\n - The column number lands at the end of the literal. I think that's fine.\n - We have to move `getFilename()`'s definition to before where it's used since\nit's `static`. That's unfortunate since this is quite far away in the source\nfrom where it used to be kept. I'm not sure how sensitive this change is.\n - This doesn't take the nice approach of PR#18328 to build a fully-informative\ncondition object where we can just pull out `w$lineno`, `w$colno` -- from\n#18708 I know messing around with warnings from C is non-trivial. Still getting\nit from the `conditionMessage()` is better than nothing.\n - I'm not very confident of the nomenclature for parser vs. lexer, but my\nunderstanding is this is a parser warning, not a lexer, since we're able to\ndeduce the tokens perfectly well.\n - For context, this arose in fulfilment of getting {lintr} to surface parser\nwarnings as lint objects: <https:\/\/github.com\/r-lib\/lintr\/issues\/2065>",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1740552836.398709",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XRX3A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18863] New: Add source locations to parser warnings",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18863"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18863\n           Summary: Add source locations to parser warnings\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: minor\n          Priority: P5\n         Component: Low-level\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": "\n\nCreated attachment 3463\n  --> "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3463&amp;action=edit",
                                "text": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3463&action=edit"
                            },
                            {
                                "type": "text",
                                "text": "\nAdd source location info to the warning messages from the parser\n\nCurrently the parser generates warnings in exactly three cases, all incorrect\nuses of the "
                            },
                            {
                                "type": "text",
                                "text": "L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " suffix for numeric literals\n\n 1. A true integer using a decimal e.g. "
                            },
                            {
                                "type": "text",
                                "text": "1.0L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n 2. A true double using a decimal and "
                            },
                            {
                                "type": "text",
                                "text": "L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " e.g. "
                            },
                            {
                                "type": "text",
                                "text": "1.1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n 3. A true double using no decimal and "
                            },
                            {
                                "type": "text",
                                "text": "L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " e.g. "
                            },
                            {
                                "type": "text",
                                "text": "1e-3L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nUnlike the helpful parser errors, however, no accompanying hint is given as to\nwhere in the source the issue might be found.\n\nThis patch adds some source info to the warning by imitating how it's produced\nin the error cases. I couldn't think of a reason not to support this, but my\nknowledge of the parser is still quite shallow.\n\nSome notes:\n\n - The column number lands at the end of the literal. I think that's fine.\n - We have to move "
                            },
                            {
                                "type": "text",
                                "text": "getFilename()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "'s definition to before where it's used since\nit's "
                            },
                            {
                                "type": "text",
                                "text": "static",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". That's unfortunate since this is quite far away in the source\nfrom where it used to be kept. I'm not sure how sensitive this change is.\n - This doesn't take the nice approach of PR#18328 to build a fully-informative\ncondition object where we can just pull out "
                            },
                            {
                                "type": "text",
                                "text": "w$lineno",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "w$colno",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " -- from\n#18708 I know messing around with warnings from C is non-trivial. Still getting\nit from the "
                            },
                            {
                                "type": "text",
                                "text": "conditionMessage()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is better than nothing.\n - I'm not very confident of the nomenclature for parser vs. lexer, but my\nunderstanding is this is a parser warning, not a lexer, since we're able to\ndeduce the tokens perfectly well.\n - For context, this arose in fulfilment of getting {lintr} to surface parser\nwarnings as lint objects: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/r-lib\/lintr\/issues\/2065"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]